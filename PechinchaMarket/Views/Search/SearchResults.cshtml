@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    IEnumerable<Comerciante> comerciante = ViewData["Comerciante"] as IEnumerable<Comerciante>;
    IEnumerable<Categoria> categorias = ViewData["Categoria"] as IEnumerable<Categoria>;
  
}

@model List<Produto>;

@{
    var prodLojasPrices = new List<float>();
    foreach (var item in Model)
    {
        foreach (var prodLoja in item.ProdutoLojas)
        {
            prodLojasPrices.Add(prodLoja.Price);
        }
    }

    float MaxProdLojasPrices = (float)0;
    if (prodLojasPrices.Count() > 0)
    {
        MaxProdLojasPrices = prodLojasPrices.Max();
    }
}

<link type="text/css" rel="stylesheet" href="~/css/slider.css" />

<script>
    document.addEventListener('click', function (event) {
        var targetDiv = document.getElementById("colapsable-div-ordenar");

        if (targetDiv.children[1].classList.contains("active") && !targetDiv.contains(event.target)){
            colapse(targetDiv);
        }
    });

    function colapse(div) {
        div.children[1].classList.toggle("active");
        var hiddenContent = div.nextElementSibling;
        hiddenContent.classList.toggle("display-none");
    }
</script>

<div class="pechincha-container">
    <section>
        <div class="column-container fit-content-height">
            <div class="thin-outline rounded-border right-flex">
                <div>
                    <div class="ordenar-search-button unselectable-text colapsable-div" id="colapsable-div-ordenar" onclick="colapse(this);">
                        <span class="colapsable-content small-margin-left unselectable-text">Ordenar por: <span class="unselectable-text" id="type-of-order-indicator">Preço mais alto</span></span>
                        <button class="colapsable-button"></button>
                    </div>
                    <div class="dropdown-content display-none">
                        <a class="unselectable-text" onclick="sortResultsByPriceDesc(this); colapse(this.parentNode.parentNode.children[0]);">Preço mais alto</a>
                        <a class="unselectable-text" onclick="sortResultsByPriceAsc(this); colapse(this.parentNode.parentNode.children[0]);">Preço mais baixo</a>
                        <a class="unselectable-text" onclick="sortResultsByBrandAsc(this); colapse(this.parentNode.parentNode.children[0]);">Marcas de A a Z</a>
                        <a class="unselectable-text" onclick="sortResultsByBrandDesc(this); colapse(this.parentNode.parentNode.children[0]);">Marcas de Z a A</a>
                    </div>
                </div>

                <div class="row-container left-flex small-gap-x">
                    <div>
                        <div class="thin-outline rounded-border small-padding filter-area-width small-margin-top">
                            <h4 class="fit-content-width">Filtrar Por:</h4>
                            <div class="fit-content-width">
                                Zona:
                                <ul class="fit-content-width">
                                    <li class="fit-content-width" style="list-style-type:none">
                                        <input type="radio" value="myLocation" name="location" />
                                        <label for="myLocation">Minha Localização</label>
                                    </li>
                                    <li class="fit-content-width" style="list-style-type:none">
                                        <input type="radio" value="city" name="location" />
                                        <label for="city">Escolher Região</label>
                                    </li>
                                    <li style="display:none">
                                        <input type=""/>
                                    </li>
                                </ul>
                            </div>
                            <div class="max-width">
                                <button type="button" class="collapsible">Comerciante:</button>
                                <ul class="max-width open">
                                    @foreach(var c in comerciante)
                                    {
                                        <li style="list-style-type:none">
                                            <input type="checkbox" value=@c.Name id=comerciantes class="comerciantes" onchange="filtrar();" unchecked />
                                            <label for=@c.Name>@c.Name</label>
                                        </li>
                                    }
                                    
                                        
                                </ul>
                            </div>
                            <div class="max-width">
                                <button type="button" class="collapsible">Categoria:</button>
                                <ul class="max-width open">
                                    @foreach (var c in categorias)
                                    {
                                        <li style="list-style-type:none">
                                            <input type="checkbox" value=@c id=categorias class="categorias" onchange="filtrar();" unchecked />
                                            <label for=@c>@c</label>
                                        </li>
                                    }


            </div>
            <div class="row-container left-flex small-gap-x">
                <div>
                    <div class="thin-outline rounded-border small-padding filter-area-width small-margin-top">
                        <h4 class="fit-content-width">Filtrar Por:</h4>
                        <div class="fit-content-width">
                            Zona:
                            <ul class="fit-content-width">
                                <li class="fit-content-width">em progresso</li>
                                <li class="fit-content-width">em progresso</li>
                            </ul>
                        </div>
                        <div class="max-width">
                            <button type="button" class="collapsible">Comerciante:</button>
                            <ul class="max-width open">
                                @foreach (var c in comerciante)
                                {
                                    <li style="list-style-type:none">
                                        <input type="checkbox" value=@c.Name id=comerciantes class="comerciantes" onchange="filtrar();" unchecked />
                                        <label for=@c.Name>@c.Name</label>
                                    </li>
                                }


                            </ul>
                        </div>
                        <div class="max-width">
                            <button type="button" class="collapsible">Categoria:</button>
                            <ul class="max-width open">
                                @foreach (var c in categorias)
                                {
                                    <li style="list-style-type:none">
                                        <input type="checkbox" value=@c id=categorias class="categorias" onchange="filtrar();" unchecked />
                                        <label for=@c>@c</label>
                                    </li>
                                }


                            </ul>
                        </div>
                        <div class="max-width">
                            <button type="button" class="collapsible">Preço:</button>
                            <div class="max-width open">
                                <div class="range_container">
                                    <div class="sliders_control">
                                        <input id="fromSlider" type="range" step="0.01" value="0" min="0" max=@MaxProdLojasPrices onchange="filtrar();" />
                                        <input id="toSlider" type="range" step="0.01" value="@MaxProdLojasPrices" min="0" max=@MaxProdLojasPrices onchange="filtrar();" />
                                    </div>
                                    <div class="form_control">
                                        <div class="form_control_container">
                                            <div class="form_control_container__time">Min</div>
                                            <input class="form_control_container__time__input" type="number" step="0.01" id="fromInput" value="0" min="0" max=@MaxProdLojasPrices onchange="filtrar();" />
                                        </div>
                                        <div class="form_control_container">
                                            <div class="form_control_container__time">Max</div>
                                            <input class="form_control_container__time__input" type="number" step="0.01" id="toInput" value="@MaxProdLojasPrices" min="0" max=@MaxProdLojasPrices onchange="filtrar();" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="wrap-flex row-container smaller-gap right-flex small-margin-top min-content-height max-width" id="search-results">
                    @foreach (var produto in Model)
                    {
                        @if (User.IsInRole("Cliente"))
                        {
                            <a class="search-result column-container center-y-flex edges-flex" asp-area="" asp-controller="Search" asp-action="AddToList" asp-route-argumentName="@produto.Id" asp-route-id="@produto.Id">
                                <span class="search-image" style="background-image: url('@Url.Action( "ShowImage", "Manager", new { id = produto.Id})')"></span>
                                <span class="search-name">@produto.Name - @comerciante.Where(c => c.UserId == produto.ProdutoLojas.OrderBy(x => x.Price).FirstOrDefault().Loja.UserId).FirstOrDefault().Name</span>
                                <span id="categoria" hidden>@produto.ProdCategoria</span>
                                <span id="brand">@produto.Brand</span>
                                <span id="price">
                                    @if (@produto.ProdutoLojas.OrderBy(x => x.Price).FirstOrDefault().Discount > 0)
                                    {
                                        var precoOriginal = @produto.ProdutoLojas.FirstOrDefault().Price;
                                        var desconto = (@produto.ProdutoLojas.OrderBy(x => x.Price).FirstOrDefault().Discount) / 100;
                                        var precoComDesconto = precoOriginal * (1 - desconto);
                                        <span>@precoComDesconto€/@produto.Unidade</span>
                                    }
                                    else
                                    {
                                        <span>
                                            @produto.ProdutoLojas.OrderBy(x => x.Price).FirstOrDefault().Price.ToString()€/@produto.Unidade
                                        </span>
                                    }
                                </span>
                            </a>
                        }
                        else
                        {
                            <a class="search-result column-container center-y-flex edges-flex">
                                <span class="search-image" style="background-image: url('@Url.Action( "ShowImage", "Manager", new { id = produto.Id})')"></span>
                                <span>@produto.Name - @comerciante.Where(c => c.UserId == produto.ProdutoLojas.OrderBy(x => x.Price).FirstOrDefault().Loja.UserId).FirstOrDefault().Name</span>
                                <span id="categoria" hidden>@produto.ProdCategoria</span>
                                <span id="brand">@produto.Brand</span>
                                <span id="price">@produto.ProdutoLojas.OrderBy(x => x.Price).FirstOrDefault().Price.ToString("C")/@produto.Unidade</span>
                            </a>
                        }
                    }
                    <div class="column-container center-y-flex center-x-flex" style="display:none;" id="no-products-indicator">
                        <span class="sad-face"></span>
                        <h4>Ops</h4>
                        <div>Não foi possivel encontrar esse produto.</div>
                        <div>Por favor tente de novo mais tarde.</div>
                    </div>
                </div>

            </div>
        </div>
    </section>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var targetNode = document.getElementById('search-results');
        var config = { childList: true, subtree: true };
        var noProductsIndicator = targetNode.querySelector('#no-products-indicator');
        console.log(noProductsIndicator);

        var callback = function (mutationsList, observer) {
            var anyVisible = Array.from(targetNode.children).some(function (child) {
                return child.style.display !== 'none' && child.id !== 'no-products-indicator';
            });

            if (anyVisible) {
                noProductsIndicator.style.display = 'none';
                if (targetNode.classList.contains('center-x-flex')) {
                    targetNode.classList.remove('center-x-flex');
                    targetNode.classList.add('right-flex');
                }
            } else {
                noProductsIndicator.style.display = 'flex';
                if (targetNode.classList.contains('right-flex')) {
                    targetNode.classList.add('center-x-flex');
                    targetNode.classList.remove('right-flex');
                }
            }
        };

        var observer = new MutationObserver(callback);
        observer.observe(targetNode, config);



        var anyVisible = Array.from(targetNode.children).some(function (child) {
            return child.style.display !== 'none' && child.id !== 'no-products-indicator';
        });

        if (anyVisible) {
            noProductsIndicator.style.display = 'none';
            if (targetNode.classList.contains('center-x-flex')) {
                targetNode.classList.remove('center-x-flex');
                targetNode.classList.add('right-flex');
            }
        } else {
            noProductsIndicator.style.display = 'flex';
            if (targetNode.classList.contains('right-flex')) {
                targetNode.classList.add('center-x-flex');
                targetNode.classList.remove('right-flex');
            }
        }
    });

    function filtrar() {

        var produtos = document.getElementById("search-results").children;
        for (var item of produtos) {
            if (item.id === 'no-products-indicator') {
                var targetNode = item.parentNode;
                var noProductsIndicator = item;

                item.parentNode.removeChild(item);
            }
        }

        var categoria = document.getElementsByClassName("categorias");
        var categoriasSelected = Array.from(categoria);
        var comerciantes = document.getElementsByClassName("comerciantes");
        var comerciantesSelected = Array.from(comerciantes);

        var precoMin = document.getElementById("fromInput").value;
        var precoMax = document.getElementById("toInput").value;

        for (item of Array.from(comerciantes)) {
            if (item.checked == false) {
                var i = comerciantesSelected.indexOf(item);
                comerciantesSelected.splice(i, 1);
            }
        }

        for (item of Array.from(categorias)) {
            if (item.checked == false) {
                var i = categoriasSelected.indexOf(item);
                categoriasSelected.splice(i, 1);
            }
        }

        for(item of produtos){
            if (parseFloat(item.querySelector("#price").textContent) > precoMax) {
                item.style.display = 'none';
            } 
            else if (parseFloat(item.querySelector("#price").textContent) < precoMin) {
                item.style.display = 'none';
            } else {
                item.style.display = "flex";
            }

            if(categoriasSelected.length > 0){
                var b = false;
                for(cat of categoriasSelected){
                    if (item.textContent.includes(cat.value)){
                        b = true;
                    }
                }
                if(!b){
                    item.style.display = 'none';
                }
            }
            
            if (comerciantesSelected.length > 0) {
                var b = false;
                for (com of comerciantesSelected) {
                    if (item.textContent.includes(com.value)) {
                        b = true;
                    }
                }
                if (!b) {
                    item.style.display = 'none';
                }
            }
            
        }


        if (targetNode && noProductsIndicator) {
            targetNode.appendChild(noProductsIndicator);
        }
    }



    //slider
    function controlFromInput(fromSlider, fromInput, toInput, controlSlider) {
        const [from, to] = getParsed(fromInput, toInput);
        fillSlider(fromInput, toInput, '#C6C6C6', '#25daa5', controlSlider);
        if (from > to) {
            fromSlider.value = to;
            fromInput.value = to;
        } else {
            fromSlider.value = from;
        }
    }

    function controlToInput(toSlider, fromInput, toInput, controlSlider) {
        const [from, to] = getParsed(fromInput, toInput);
        fillSlider(fromInput, toInput, '#C6C6C6', '#25daa5', controlSlider);
        setToggleAccessible(toInput);
        if (from <= to) {
            toSlider.value = to;
            toInput.value = to;
        } else {
            toInput.value = from;
        }
    }

    function controlFromSlider(fromSlider, toSlider, fromInput) {
        const [from, to] = getParsed(fromSlider, toSlider);
        fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
        if (from > to) {
            fromSlider.value = to;
            fromInput.value = to;
        } else {
            fromInput.value = from;
        }
    }

    function controlToSlider(fromSlider, toSlider, toInput) {
        const [from, to] = getParsed(fromSlider, toSlider);
        fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
        setToggleAccessible(toSlider);
        if (from <= to) {
            toSlider.value = to;
            toInput.value = to;
        } else {
            toInput.value = from;
            toSlider.value = from;
        }
    }

    function getParsed(currentFrom, currentTo) {
        const from = parseFloat(currentFrom.value, 10);
        const to = parseFloat(currentTo.value, 10);
        return [from, to];
    }

    function fillSlider(from, to, sliderColor, rangeColor, controlSlider) {
        const rangeDistance = to.max - to.min;
        const fromPosition = from.value - to.min;
        const toPosition = to.value - to.min;
        controlSlider.style.background = `linear-gradient(
          to right,
          ${sliderColor} 0%,
          ${sliderColor} ${(fromPosition) / (rangeDistance) * 100}%,
          ${rangeColor} ${((fromPosition) / (rangeDistance)) * 100}%,
          ${rangeColor} ${(toPosition) / (rangeDistance) * 100}%,
          ${sliderColor} ${(toPosition) / (rangeDistance) * 100}%,
          ${sliderColor} 100%)`;
    }

    function setToggleAccessible(currentTarget) {
        const toSlider = document.querySelector('#toSlider');
        if (Number(currentTarget.value) <= 0) {
            toSlider.style.zIndex = 2;
        } else {
            toSlider.style.zIndex = 0;
        }
    }

    const fromSlider = document.querySelector('#fromSlider');
    const toSlider = document.querySelector('#toSlider');
    const fromInput = document.querySelector('#fromInput');
    const toInput = document.querySelector('#toInput');
    fillSlider(fromSlider, toSlider, '#C6C6C6', '#25daa5', toSlider);
    setToggleAccessible(toSlider);

    fromSlider.oninput = () => controlFromSlider(fromSlider, toSlider, fromInput);
    toSlider.oninput = () => controlToSlider(fromSlider, toSlider, toInput);
    fromInput.oninput = () => controlFromInput(fromSlider, fromInput, toInput, toSlider);
    toInput.oninput = () => controlToInput(toSlider, fromInput, toInput, toSlider);

    //collapsibles

    var coll = document.getElementsByClassName("collapsible");
    var i;

    for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function () {
            this.classList.toggle("active");
            var content = this.nextElementSibling;
            if (content.style.maxHeight) {
                content.style.maxHeight = null;
            } else {
                content.style.maxHeight = content.scrollHeight + "px";
            }
        });
    }

    function sortResultsByPriceDesc(div){
        var resultsContainer = document.getElementById("search-results");

        var results = Array.from(document.getElementById("search-results").children);
        results = results.filter(function (child) {
            return child.id !== 'no-products-indicator' && child.style.display !== "none";;
        });

        if (results.length > 0) {
            function sortByPrice(a, b) {
                var priceA = parseFloat(a.querySelector("#price").textContent.replace(/[^\d.]/g, ''));
                var priceB = parseFloat(b.querySelector("#price").textContent.replace(/[^\d.]/g, ''));
                return priceB - priceA;
            }
            results.sort(sortByPrice);
            resultsContainer.innerHTML = '';

            results.forEach(function (result) {
                resultsContainer.appendChild(result);
            });
        }
        
        document.getElementById("type-of-order-indicator").innerHTML = div.innerHTML;
    }

    function sortResultsByPriceAsc(div) {
        var resultsContainer = document.getElementById("search-results");

        var results = Array.from(document.getElementById("search-results").children);
        results = results.filter(function (child) {
            return child.id !== 'no-products-indicator' && child.style.display !== "none";;
        });

        if (results.length > 0) {
            function sortByPrice(a, b) {
                var priceA = parseFloat(a.querySelector("#price").textContent.replace(/[^\d.]/g, ''));
                var priceB = parseFloat(b.querySelector("#price").textContent.replace(/[^\d.]/g, ''));
                return priceA - priceB;
            }
            results.sort(sortByPrice);
            resultsContainer.innerHTML = '';

            results.forEach(function (result) {
                resultsContainer.appendChild(result);
            });
        }

        document.getElementById("type-of-order-indicator").innerHTML = div.innerHTML;
    }

    function sortResultsByBrandAsc(div) {
        var resultsContainer = document.getElementById("search-results");
        var results = Array.from(document.getElementById("search-results").children);
        results = results.filter(function (child) {
            return child.id !== 'no-products-indicator' && child.style.display !== "none";;
        });

        if (results.length > 0) {
            function sortByBrand(a, b) {
                var brandA = a.querySelector("#brand").textContent;
                var brandB = b.querySelector("#brand").textContent;

                return brandA.localeCompare(brandB);
            }

            results.sort(sortByBrand);
            resultsContainer.innerHTML = '';

            results.forEach(function (result) {
                resultsContainer.appendChild(result);
            });
        }

        document.getElementById("type-of-order-indicator").innerHTML = div.innerHTML;
    }

    function sortResultsByBrandDesc(div) {
        var resultsContainer = document.getElementById("search-results");
        var results = Array.from(document.getElementById("search-results").children);
        results = results.filter(function (child) {
            return child.id !== 'no-products-indicator' && child.style.display !== "none";
        });

        if (results.length > 0) {
            function sortByBrand(a, b) {
                var brandA = a.querySelector("#brand").textContent;
                var brandB = b.querySelector("#brand").textContent;

                return brandB.localeCompare(brandA);
            }

            results.sort(sortByBrand);
            resultsContainer.innerHTML = '';

            results.forEach(function (result) {
                resultsContainer.appendChild(result);
            });
        }

        document.getElementById("type-of-order-indicator").innerHTML = div.innerHTML;
    }

</script>