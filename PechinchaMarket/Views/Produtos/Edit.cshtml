@model PechinchaMarket.Models.Produto

@{
    ViewData["Title"] = "Edit";
    IEnumerable<Loja> lojas = ViewData["Lojas"] as IEnumerable<Loja>;
}
<link href="~/css/produto.css" rel="stylesheet" />

<a class="img-back" asp-action="Index"></a>
<h2>Editar Produto</h2>

<body class="gradiante2-secondary-color background-height">
    <div>
        <form asp-action="Edit" enctype="multipart/form-data"  class="form">
            <input type="hidden" name="produtoId" value="@Model.Id" />
            <div class="addProduct">
            <div class="addProductLeft">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <div style="display:none" id="produtoId">
                    @Html.DisplayFor(model => model.Id)
                </div>
                <div class="form-group">
                        <input type="text" name="name" style="display: none" value="@Model.Name" />
                        @Html.DisplayFor(model => model.Name)
                </div>
                <div class="form-group">
                        <input type="text" name="brand" style="display: none" value="@Model.Brand" />
                        @Html.DisplayFor(model => model.Brand)
                </div>
                <div class="form-group">
                    <label>Categoria: </label>
                    @Html.DisplayFor(model => model.ProdCategoria)
                </div>
                <hr />
                    <div class="precoUnidade form-group">
                        <div class="preco">
                            <input class="form-control" id="price" onchange="changePrice()" placeholder="€" value="">
                        </div>
                         €/ 
                        <div class="unidade">
                            @Html.DisplayFor(model => model.Unidade)
                        </div>
                    </div>
                    <div>
                        <input type="checkbox" id="discounts" onchange="hasDiscount(this)" />
                        <label for="discounts">Aplicar desconto</label>
                    </div>
                    <div id="descontos" class="desconto form-group">
                       <div class="">
                            <label for="valor">Valor: </label>
                                <input class="form-control custom-input" id="valor" onchange="changeDiscount()"/>
                        </div> %
                        <div class="duracao">
                            <label for="daterange">Selecione o intervalo de datas:</label>
                            <input name="duration" type="text" id="daterange" onclick="toggleDatepickers()" readonly="true"/>

                            <input type="date" id="startDatePicker" style="display: none" onchange="handleDateChange(event)">
                            <input type="date" id="endDatePicker" style="display: none" onchange="handleDateChange(event)">
                        </div>
                        
                    </div>     
                    <div class="form-group">
                        <input type="checkbox" id="shops" onchange="hasShops(this)" />
                        <label for="shops">Personalizar desconto por loja</label>
                    </div>
            </div>
            <div class="addProductRight">
                <div class="form-group">
                        <label>Imagem: </label>
                        <img id="image_preview" src="@Url.Action("Show", "Produtos", new { id = @Model.Id})" alt="your image" width="250px" height="250px" class="imagePlaceholder" />
                        <div class="uploadImage">
                            <label asp-for ="@Model.Image" class="custom-file-upload">Adicionar Foto</label>
                            <input type="file" asp-for="@Model.Image" class="image" name="file" onchange="readfile(this)" />
                            <span asp-validation-for="@Model.Image" class="text-danger"></span>
                        </div>
                </div>
            </div>
            </div>
            <div class="bottom">
                <div id="lojas">
                    <table class="shopTable">
                        <thead>
                            <tr>
                                <th>
                                    Morada
                                </th>
                                <th>
                                    Preço
                                </th>
                                <th>
                                    Desconto
                                </th>
                                <th>
                                    Duração 
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.ProdutoLojas != null)
                            {
                                @foreach (var pl in Model.ProdutoLojas)
                                {
                                    <tr>
                                        <td>
                                            @Html.DisplayFor(modelItem => pl.Loja.Address)
                                        </td>
                                        <td>
                                            <input type="number" id="priceInput" name="price" class="prices custom-input" value="@pl.Price" /> €
                                        </td>
                                        <td>
                                            <input type="number"  name="discount" class="discount custom-input" value="@pl.Discount"/> %
                                        </td>
                                        <td>
                                            <input type="text" id="data" class="data" onclick="openDatepicker()" readonly="true" value="@pl.StartDiscount - @pl.EndDiscount"/>

                                            <input type="date" id="startDatePicker" style="display: none" onchange="handleDateChange(event)">
                                            <input type="date" id="endDatePicker" style="display: none" onchange="handleDateChange(event)">
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>

                <div class="form-group">
                    <input name="id" type="hidden" asp-for="@Model.Id, " />
                    <input type="submit" value="Guardar Alterações" class="blue-button" />
                </div>
            </div>
        </form>
        </div>
</body>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script>
        function readfile(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    $('#image_preview').attr('src', e.target.result);
                }

                reader.readAsDataURL(input.files[0]);
            }
        }

        function hasShops(input) {
            var x = document.getElementById("lojas")
            if (input.checked == true) {
                x.style.display = "block"
            } else {
                x.style.display = "none"
            }
        }

        function hasDiscount(input) {
            var x = document.getElementById("descontos")
            if (input.checked == true) {
                x.style.display = "block"
            } else {
                x.style.display = "none"
            }
        }

        function changePrice() {
            var p = document.getElementById("price");
            var ps = document.getElementsByClassName("prices")

            for (let item of ps) {
                    item.value = p.value
            }
        }

        function changeDiscount() {
            var v = document.getElementById("valor");
            var d = document.getElementsByClassName("discount")

            for (let item of d) {
                item.value = v.value
            }
        }

        let startDate = null;
        let endDate = null;

        function toggleDatepickers() {
            const startDatePicker = document.getElementById("startDatePicker");
            const endDatePicker = document.getElementById("endDatePicker");

            if (startDatePicker.style.display === "none") {
                startDatePicker.style.display = "block";
                endDatePicker.style.display = "block";
            } else {
                startDatePicker.style.display = "none";
                endDatePicker.style.display = "none";
            }
        }

        function handleDateChange(event) {
            const selectedDate = event.target.value;

            if (event.target.id === "startDatePicker") {
                startDate = new Date(selectedDate).toLocaleDateString('pt-BR');
                validateDate(startDate, endDate); // Validar a data de início
            } else if (event.target.id === "endDatePicker") {
                endDate = new Date(selectedDate).toLocaleDateString('pt-BR');
                validateDate(startDate, endDate); // Validar a data de fim

                // Atualizar o valor do input para mostrar o intervalo de datas
                document.getElementById("daterange").value = startDate + " - " + endDate;

                // Esconder os inputs de data
                document.getElementById("startDatePicker").style.display = "none";
                document.getElementById("endDatePicker").style.display = "none";

                changeDate();
            }
        }

        function changeDate() {
            var da = document.getElementById("daterange").value;
            var dt = document.getElementsByClassName("data");
            for (let item of dt) {
                item.value = da;
            }
        }

        function validateDate(startDate, endDate) {
            var startDateObj = new Date(startDate);
            var endDateObj = new Date(endDate);
            var today = new Date();

            if (startDateObj < today) {
                alert('A data de início não pode ser anterior a hoje');
                document.getElementById('startDatePicker').value = '';
                return false; // Retorna falso se a data de início não for válida
            }

            if (endDateObj <= startDateObj) {
                alert('A data de fim deve ser posterior à data de início');
                document.getElementById('endDatePicker').value = '';
                return false; // Retorna falso se a data de fim não for válida
            }

            return true; // Retorna verdadeiro se ambas as datas forem válidas
        }

    </script>
}
